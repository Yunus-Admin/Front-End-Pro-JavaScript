function isPalindrome(num, count) {
  //устанавливаем счетчик и по default он = 0
  count = count || 0;

  //Добавляем базовый случай, когда полученное число === перевернутому

  //преобразуем переданное число num в строку
  let str = num.toString();

  //Переворачиваем строку str. Через split - разбиваем строку на массив. Через reverse переворачиваем и join - снова объединяем в строку
  let strReverse = str.split("").reverse().join("");

  //Если полученное число(строка) === перевернутому записываем в объект и выходим
  if (str === strReverse) {
    return {
      result: num,
      steps: count,
    };
  }

  // Если не равно, то преобразуем strReverse в число и запускаем рекурсию со счетчиком + 1
  return isPalindrome(num + Number(strReverse), count + 1);
}

console.log(isPalindrome(96));

// Поработаем с числовым палиндромом

// Числовой палиндром — это натуральное число, которое читается
// слева направо и справа налево одинаково. Иначе говоря, отличается
// симметрией записи (расположения цифр), причём число знаков может
// быть как чётным, так и нечётным.

// Палиндром можно получить как результат операций над другими числами.
// Возьмём любое натуральное число и сложим его с обращённым числом,
// то есть записанным теми же цифрами, но в обратном порядке. Проделаем
// то же действие с получившейся суммой и будем повторять его до тех пор,
// пока не образуется палиндром. Иногда достаточно сделать всего один шаг
// (например, 312 + 213 = 525), но, как правило, требуется не менее двух.
// Скажем, число 96 порождает палиндром 4884 только на четвёртом шаге....

// В результате я хочу, чтоб вы написали функцию, которая будет возвращать
//  объект где будет свойство result - и это будет палиндром и свойство
//  steps - это число вызовов до нахождения палиндрома
